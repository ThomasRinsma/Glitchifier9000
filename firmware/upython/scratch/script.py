# Some drawing examples

import utime
import framebuf
import _thread

from ssd1306 import SSD1306_I2C
from machine import Pin, I2C, Timer

def tick(timer):
    global led
    led.toggle()

# How to do this normally??
# -> access .buffer directly, but each byte goes vertical instead of horizontal as i did now
def draw_from_bytes(oled, bs):
    bits = [list(f'{b:08b}') for b in bs]
    bits = [num == '1' for elem in bits for num in elem]
    for idx, bit in enumerate(bits):
        oled.pixel(idx % 128, idx // 128, bit)

print('blinking LED')

led = Pin(25, Pin.OUT)
tim = Timer()

tim.init(freq=2.5, mode=Timer.PERIODIC, callback=tick)

print('drawing pixels')

WIDTH  = 128
HEIGHT = 32

i2c = I2C(1, sda=Pin(26), scl=Pin(27))

print(i2c.scan())
print(f'I2C Configuration: {i2c}')
print(f'I2C Address      : {i2c.scan()[0]:x}')

oled = SSD1306_I2C(WIDTH, HEIGHT, i2c)

oled_x = 0
oled_y = 0

logo = bytes.fromhex('00000000000000000000000000c8000000000180000003fe7fcff9ff00887e000000018000000304608c1182009840000000000000000300600c0180019080000000000000000300600c01800110e0000001930f07308610c218430807fcf0000001bb1119318620c4188310022018000001c319212187e0fc1f83f0022008000001821860230620c4188310064008000001820c40630c01803006001ff008000003060440670c018030060004c0080000030646c04a0c01813006040c8010000002044642528c018330060c088610000002077c7c631c03fe700ff80987e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000002000180600000000000008a0000100002000200800000000000008a000010002200020080000000000000abcee381e07bce079de7000000000000525e8781c0225e023c8f00000000000052508400202250022088000000000000524e8381e03a4e021c87200000000000000000000000000000002000000000000000000000000000000000200002080000000000000000000000802000020047000000000000000000008020000200430000000000000000000083b8d17ad8420000000000000000000087a5357388420000000000000000000084252e0b880000000000000000000000f3b8ca7adc42')

# logo2 = bytes.fromhex('000000000000000000000000000000000000000000000000000000000000000001ff000000000000000000000000000003ffc00000000000000000000000000007ffe0000000000000000000000000000ffff000000000000000007ff00000000e0070000000000000000fffffe000001c0070000000000000001ffffff800003c0070000000000000007ffffffe0000780070f8000000000000fc0e00ff0000f0003ffff80000000001e00e00078000f0003fffff8000000003c00f0003c000f0001fffffe00000000780070001c000f00000003ffffc00001e00070001e0007800000001ffff00007c0007007ee0003e000000003ffff01ff80007bfffe0003f000000000017ffffe00007fffff0001f000000000001ffffc00007fffef000078007fde000003ffe0000079800f00007800fffffffc000000000078000f00007001fffffffff00000000078000f0000f000ffffffffff0000000078000f0000f0007800007fffff80000070000e0000f000780000007fffe0000070001e0001e0007000000000fff80000f0001c0000e00078000000001fff03f46000380000e000f000000000001fffffe000380000e001e0000000000007ffffff007000007003c0000000000001fffffffde000007c1f800000000000000000ffffc000007fff00000000000000000017ff8000003ffe000000000000000000001f00000')

def boot_animation(*args):
    print('drawing boot in other core')
    global oled
    oled.fill(0)
    oled.show()
    oled.vline(1, 0, HEIGHT, 1)
    oled.show()
    for _ in range(WIDTH-2):
        oled.scroll(1, 0)
        oled.show()

    oled.fill(0)
    oled.show()
    draw_from_bytes(oled, args[0])
    oled.show()
    print('drawing boot done')

_thread.start_new_thread(boot_animation, (logo,))


# def oled_animate(timer):
#     global oled
    
# tim2 = Timer()
# tim2.init(freq=100, mode=Timer.PERIODIC, callback=pixelflow)

